{
 ;; Application definitions based on bundle_identifiers found in the JSON
 :applications {:vivaldi ["^com\\.vivaldi\\.Vivaldi$"]
                :arc ["^company\\.thebrowser\\.Browser$"]
                :finder ["^com\\.apple\\.finder"]
                :notion ["^notion\\.id$"]
                :spotify ["^com\\.spotify\\.client$"]
                ;; Add other applications if needed based on identifiers
               }

 :main [

  ;; Rule: Q+F to launch Obsidian (using variables)
  {:des "Q+F to launch Obsidian (using variables)"
   :rules [;; Q pressed sets variable
           [:q ["q_pressed" 1] nil {:alone :q :afterup ["q_pressed" 0]}]
           ;; F triggers Obsidian when q_pressed is active
           [:f "open -a 'Obsidian.app'" ["q_pressed" 1]]
          ]}

  ;; Rule: Launch Spotify simultaneously (Q+R)
  {:des "Launch Spotify simultaneously (Q+R)"
   :rules [
           [[:q :r] "open -a 'Spotify.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
          ]}

  ;; Rule: Launch Arc simultaneously (Q+W)
  {:des "Launch Arc simultaneously (Q+W)"
   :rules [
           [[:q :w] "open -a 'Arc.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
          ]}

  ;; Rule: Launch Arc simultaneously (D+V) - Standalone
  {:des "Launch Arc simultaneously (D+V) - Standalone"
   :rules [
           [[:d :v] "open -a 'Arc.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
          ]}

  ;; Rule: D key combinations (D+F, D+V, D+others)
  {:des "D key Layer (Dictation, Arc, Passthrough)"
   :rules [;; D pressed sets variable
           [:d ["d_pressed" 1] nil {:alone :d :afterup ["d_pressed" 0]}]
           [:f :!TS0 ["d_pressed" 1]] ;; D+F -> Dictation
           [:v "open -a 'Arc.app'" ["d_pressed" 1]] ;; D+V -> Arc
           [:a [:d :a] ["d_pressed" 1]] ;; D+A passthrough etc.
           [:b [:d :b] ["d_pressed" 1]]
           [:c [:d :c] ["d_pressed" 1]]
           [:e [:d :e] ["d_pressed" 1]]
           [:g [:d :g] ["d_pressed" 1]]
           [:h [:d :h] ["d_pressed" 1]]
           [:i [:d :i] ["d_pressed" 1]]
           [:j [:d :j] ["d_pressed" 1]]
           [:k [:d :k] ["d_pressed" 1]]
           [:l [:d :l] ["d_pressed" 1]]
           [:m [:d :m] ["d_pressed" 1]]
           [:n [:d :n] ["d_pressed" 1]]
           [:o [:d :o] ["d_pressed" 1]]
           [:p [:d :p] ["d_pressed" 1]]
           [:q [:d :q] ["d_pressed" 1]]
           [:r [:d :r] ["d_pressed" 1]]
           [:s [:d :s] ["d_pressed" 1]]
           [:t [:d :t] ["d_pressed" 1]]
           [:u [:d :u] ["d_pressed" 1]]
           [:w [:d :w] ["d_pressed" 1]]
           [:x [:d :x] ["d_pressed" 1]]
           [:y [:d :y] ["d_pressed" 1]]
           [:z [:d :z] ["d_pressed" 1]]
           [:spacebar [:d :spacebar] ["d_pressed" 1]]
          ]}

  ;; Rule: Launch WhatsApp simultaneously (Q+T)
  {:des "Launch WhatsApp simultaneously (Q+T)"
   :rules [
           [[:q :t] "open -a 'WhatsApp.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
          ]}

  ;; Rule: Write command alone is enter. - CORRECTED
  {:des "Right Command alone is Enter"
   :rules [
           [## :right_command :right_command nil {:alone :return_or_enter}]
          ]}

  ;; Rule: Complete Caps Lock Configuration (Hyper Key) - CORRECTED
  {:des "Caps Lock Hyper Key Configuration"
   :rules [
           ;; Caps Lock -> Hyper Key (Escape if alone), optional any modifier - CORRECTED
           [## :caps_lock ["hyper" 1] nil {:alone :escape :afterup ["hyper" 0]}]

           ;; Command+Caps Lock to Command+F (Find)
           [:!C :caps_lock :!Cf]

           ;; Conditional Mappings (when hyper is 1)
           [:a :!CSslash ["hyper" 1]]      ;; Hyper+A -> Find in Page
           [:d :!CSt ["hyper" 1]]          ;; Hyper+D -> New Tab
           [:i :!Cup_arrow ["hyper" 1]]    ;; Hyper+I -> Move to Start of Doc
           [:k :!Cdown_arrow ["hyper" 1]]  ;; Hyper+K -> Move to End of Doc
           [:!Sk :!CSdown_arrow ["hyper" 1]] ;; Hyper+Shift+K -> Select to End
           [:!Si :!CSup_arrow ["hyper" 1]]   ;; Hyper+Shift+I -> Select to Start
           [:s :!Cs ["hyper" 1]]          ;; Hyper+S -> Save
           [:spacebar :!Of19 ["hyper" 1]]  ;; Hyper+Space -> k Light
           [:f :!TS0 ["hyper" 1]]          ;; Hyper+F -> Dictation
           [:v :!Of8 ["hyper" 1]]          ;; Hyper+V -> OCR
           [:r :!CS4 ["hyper" 1]]          ;; Hyper+R -> Screenshot

           ;; Standalone Caps Lock combinations (might conflict/be redundant)
           [:!SPi :!CSup_arrow] ;; Caps+Shift+I -> Select to Start
           [:!SPk :!CSdown_arrow] ;; Caps+Shift+K -> Select to End
          ]}

 ;; Rule: Clipboard Trigger
 {:des "Clipboard Trigger (Option+V)"
  :rules [
          [:!Ov :!TS4]
         ]}

 ;; Rule: Brightness Controls
 {:des "Brightness Controls"
  :rules [
          [:!Cf2 :display_brightness_decrement]
          [:!Cf3 :display_brightness_increment]
         ]}

 ;; Rule: Both Command keys to trigger Wispr (Cmd+0) - CORRECTED
 {:des "Both Command keys for Wispr (Cmd+0)"
  :rules [
          ;; Left Command pressed sets variable, passes through command - CORRECTED
          [## :left_command [:left_command ["left_command_pressed" 1]] nil {:afterup ["left_command_pressed" 0]}]
          ;; Right Command triggers Cmd+0 when left_command_pressed is active - CORRECTED
          [## :right_command :!C0 ["left_command_pressed" 1]]
         ]}

 ;; Rule: Hotkey Mappings (Miscellaneous) - CORRECTED
 {:des "Hotkey Mappings"
  :rules [
          [:!Ccomma {:pkey :button1}] ;; Cmd+, -> Left Click
          [:!Cf :!Ctab] ;; Cmd+F -> Cmd+Tab (App Switch)
          [:grave_accent_and_tilde :tab [:vivaldi :arc]] ;; ` -> Tab (in Vivaldi/Arc)
          [:!CSc :!COc [:finder]] ;; Cmd+Shift+C -> Cmd+Opt+C (in Finder)
          [:grave_accent_and_tilde :f2 [:!vivaldi :!arc]] ;; ` -> F2 (elsewhere)
          [:!Sf :!TSf5] ;; Shift+F -> Ctrl+Shift+F5 (Grammar)
          [:!Ek :!Ck] ;; RightOpt+K -> Cmd+K
          [:!O4 :!COescape] ;; Opt+4 -> Cmd+Opt+Esc
          [:!Cy :!CSz] ;; Cmd+Y -> Redo (Cmd+Shift+Z)
          [:!Cq :!Ck [:notion]] ;; Cmd+Q -> Cmd+K (in Notion)
          [:!Cw :!TStab] ;; Cmd+W -> Cycle Tab Back (Ctrl+Shift+Tab)
          [:!CSw :!CSpage_down] ;; Cmd+Shift+W -> Page Down
          [:!CPr :!Ttab] ;; Cmd(+Caps)+R -> Cycle Tab Fwd (Ctrl+Tab)
          [:!CPescape :!Cr] ;; Cmd(+Caps)+Esc -> Refresh (Cmd+R)
          [:!CSr :!CSpage_up] ;; Cmd+Shift+R -> Page Up
          [:!Ce :!Cw] ;; Cmd+E -> Close Tab (Cmd+W)
          [:!Cq :!Cl [:!notion]] ;; Cmd+Q -> Addr Bar (Cmd+L) (not Notion)
          [:!Ct :!Cg] ;; Swap Cmd+T <-> Cmd+G
          [:!Cg :!Ct] ;; Swap Cmd+G <-> Cmd+T
          [:f1 :mute]
          [:f2 :volume_decrement]
          [:f3 :volume_increment]
          [:f4 :play_or_pause]
          [:f7 :rewind]
          [:f9 :fastforward]
          ;; CORRECTED Escape mappings with ##
          [## :escape :!Cf16 [:vivaldi :arc]] ;; Esc -> Cmd+F16 (Vivaldi/Arc)
          [## :escape :!Ck [:spotify]] ;; Esc -> Cmd+K (Spotify)
          [:escape :tab [:!vivaldi :!arc :!spotify]] ;; Esc -> Tab (elsewhere)
          [:tab :escape [:!vivaldi :!arc :!spotify]] ;; Tab -> Esc (elsewhere)
          [:!Sescape :!Stab [:!vivaldi :!arc :!spotify]] ;; Shift+Esc -> Shift+Tab (elsewhere)
          [:slash :j] ;; / -> j
          [:!Sright_shift :!Squote] ;; LeftShift+RightShift -> "
          [:!Sslash :!Sj] ;; Shift+/ -> J
          [:close_bracket :open_bracket] ;; ] -> [
          [:backslash :close_bracket] ;; \ -> ]
          [:!Sclose_bracket :!Sopen_bracket] ;; Shift+] -> {
          [:!Sbackslash :!Sclose_bracket] ;; Shift+\ -> }
          [:!Cs :!Copen_bracket] ;; Cmd+S -> Prev Tab (Cmd+[)
          [:!Cd :!Cclose_bracket] ;; Cmd+D -> Next Tab (Cmd+])
         ]}

 ;; Rule: Caps Lock triggers menu bar search (Assuming Hyper+A)
 {:des "Hyper+A triggers menu bar search"
  :rules [
          [:a "osascript ~/scripts/menu_bar_search.scpt" ["hyper" 1]]
         ]}

 ;; Rule: Text Revision App (Right Option layer?)
 {:des "Text Revision App Hotkeys (Right Option)"
  :rules [
          [:!Eg :!Sf18] ;; German
          [:!Ep :!Sf17] ;; PT EU
          [:!Eq :!Sf13] ;; PT BR
          [:!Ee :!TS8]  ;; English
          [:!Es :!Sf19] ;; Spanish
          [:!Ef :!Sf12] ;; French
          [:!Et :!CS9]  ;; French tutoyer
         ]}

 ;; Rule: Vivaldi: Right Command + K to Control + F18
 {:des "Vivaldi Quick Command Palette"
  :rules [
          [:!Qk :!Tf18 [:vivaldi]]
         ]}

 ;; Rule: Command + Caps Lock triggers Command + Tab (Reinterpreting Cmd+Tab)
 {:des "Remap Command+Tab and related"
  :rules [
          [:!Ctab :!Cgrave_accent_and_tilde]
          [:!Cgrave_accent_and_tilde :!Cf3]
          [:!Otab :!CSw]
         ]}

 ;; Rule: Application Launchers (Option Layer)
 {:des "Application Launchers (Left Option)"
  :rules [
          [:!OPd "open -a 'Notion.app'"]
          [:!OPf "open -a 'Visual Studio Code.app'"]
          [:!OPc "open -a 'Obsidian.app'"]
          [:!OPg "open -a 'Anki.app'"]
          [:!OP1 "open -a 'Spotify.app'"]
          [:!OPe "open -a 'Tasks.app'"]
          [:!OPq "open -a 'Deepl.app'"]
          [:!OPw "osascript -e 'tell application \"Finder\" to activate'"]
          [:!OPt "open -a 'WhatsApp.app'"]
          [:!C3 "osascript -e 'tell application \"Finder\" to activate' -e 'tell application \"System Events\" to tell process \"Finder\" to click (menu item \"Hide Others\" of menu \"Finder\" of menu bar 1)' -e 'delay 0.1' -e 'tell application \"System Settings\" to activate'"]
          [:!O3 "open -a 'System Settings.app'"]
          [:!OPs "open -a 'Gmail.app'"]
          [:!OPr "open -a 'RogerRoger.app'"]
          [:!OPx "open -a 'Google Calendar.app'"]
          [:!O2 "open -a Voxbi"]
          [:!OPb "open -n -a 'Safari.app' --args --disable-features=RendererCodeIntegrity"]
          [:!OPa "open -a 'Arc.app'"]
         ]}

 ;; Rule: Arrows Highlight and Delete and Backspace Modifications
 {:des "Navigation, Deletion, and Key Swaps"
  :rules [
          ;; Base Keys
          [:j :delete_or_backspace]
          [{:pkey :button3} :delete_or_backspace]
          [:open_bracket :delete_forward]
          [:quote :!Sslash]
          [:delete_or_backspace :quote]
          [:semicolon :right_shift]
          [:right_shift :quote]
          [:return_or_enter :semicolon]
          [:slash :j]

          ;; Shift Modified
          [:!Sj :!Cdelete_or_backspace]
          [:!Sdelete_or_backspace :!Squote]
          [:!Sreturn_or_enter :!Ssemicolon]
          [:!Squote :slash]
          [:!Sopen_bracket [:!CSright_arrow :delete_or_backspace]]
          [:!Sslash :!Sj]

          ;; Command Modified
          [:!Cj :!Odelete_or_backspace]
          [:!Cquote :!CSslash]
          [:!Copen_bracket :!Odelete_forward]
          [:!Ch :!Oleft_arrow]
          [:!Cn :left_arrow]
          [:!Cm :right_arrow]
          [:!Ck :down_arrow]
          [:!Ci :up_arrow]
          [:!Cu :!Cleft_arrow]
          [:!Co :!Cright_arrow]
          [:!Cl :!Oright_arrow]

          ;; Command+Shift Modified
          [:!CSn :!Sleft_arrow]
          [:!CSm :!Sright_arrow]
          [:!CSk :!Sdown_arrow]
          [:!CSi :!Sup_arrow]
          [:!CSu :!CSleft_arrow]
          [:!CSo :!CSright_arrow]
          [:!CSh :!OSleft_arrow]
          [:!CSl :!OSright_arrow]

          ;; Option Modified
          [:!Oi :!Oup_arrow]
          [:!Ok :!Odown_arrow]
          [:!Oj [:!CSup_arrow :delete_or_backspace]]
          [:!Oopen_bracket [:!CSdown_arrow :delete_or_backspace]]

          ;; Option+Shift Modified
          [:!OSi :!OSup_arrow]
          [:!OSk :!OSdown_arrow]

          ;; Pointing Button Modified (Syntax is approximate)
          [{:pkey :button3 :modi ["command" "shift"]} {:key_code :delete_or_backspace :modi ["command" "shift"]}]
          [{:pkey :button3 :modi ["command"]} :!Odelete_or_backspace]
          [{:pkey :button3 :modi ["shift"]} :!Cdelete_or_backspace]
          [{:pkey :button3 :modi ["command"]} :!Creturn_or_enter] #_<- Syntax might need check
          [{:pkey :button3 :modi ["option"]} [:!CSup_arrow :delete_or_backspace]]

         ]}
 ]
}