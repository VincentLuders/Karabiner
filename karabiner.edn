{
 ;; Application definitions based on bundle_identifiers found in the JSON
 :applications {:vivaldi ["^com\\.vivaldi\\.Vivaldi$"]
                :arc ["^company\\.thebrowser\\.Browser$"]
                :finder ["^com\\.apple\\.finder"]
                :notion ["^notion\\.id$"]
                :spotify ["^com\\.spotify\\.client$"]
                ;; Add other applications if needed based on identifiers
               }

 :main [

    ;; Rule: Launch Spotify simultaneously (Q+R) - CORRECTED AGAIN
    {:des "Launch Spotify simultaneously (Q+R)"
    :rules [
            ;; Added 'nil' back for the condition placeholder
            [[:q :r] "open -a 'Spotify.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
            ]}

    ;; Rule: Launch Arc simultaneously (Q+W) - CORRECTED AGAIN
    {:des "Launch Arc simultaneously (Q+W)"
    :rules [
            ;; Added 'nil' back for the condition placeholder
            [[:q :w] "open -a 'Arc.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
            ]}

    ;; Rule: Launch Arc simultaneously (D+V) - Standalone - CORRECTED AGAIN
    {:des "Launch Arc simultaneously (D+V) - Standalone"
    :rules [
            ;; Added 'nil' back for the condition placeholder
            [[:d :v] "open -a 'Arc.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
            ]}

    ;; Rule: Launch WhatsApp simultaneously (Q+T) - CORRECTED AGAIN
    {:des "Launch WhatsApp simultaneously (Q+T)"
    :rules [
            ;; Added 'nil' back for the condition placeholder
            [[:q :t] "open -a 'WhatsApp.app'" nil {:basic.simultaneous_threshold_milliseconds 1000000}]
         ]}

  ;; Rule: D key combinations (D+F, D+V, D+others)
  {:des "D key Layer (Dictation, Arc, Passthrough)"
   :rules [;; D pressed sets variable
           [:d ["d_pressed" 1] nil {:alone :d :afterup ["d_pressed" 0]}]
           ;; D+F for Dictation (Ctrl+Shift+0)
           [:f :!TS0 ["d_pressed" 1]]
           ;; D+V for Arc (This version activates within the D layer)
           [:v "open -a 'Arc.app'" ["d_pressed" 1]]
           ;; D+A passthrough
           [:a [:d :a] ["d_pressed" 1]]
           ;; D+B passthrough
           [:b [:d :b] ["d_pressed" 1]]
           ;; D+C passthrough
           [:c [:d :c] ["d_pressed" 1]]
           ;; D+E passthrough
           [:e [:d :e] ["d_pressed" 1]]
           ;; D+G passthrough
           [:g [:d :g] ["d_pressed" 1]]
           ;; D+H passthrough
           [:h [:d :h] ["d_pressed" 1]]
           ;; D+I passthrough
           [:i [:d :i] ["d_pressed" 1]]
           ;; D+J passthrough
           [:j [:d :j] ["d_pressed" 1]]
           ;; D+K passthrough
           [:k [:d :k] ["d_pressed" 1]]
           ;; D+L passthrough
           [:l [:d :l] ["d_pressed" 1]]
           ;; D+M passthrough
           [:m [:d :m] ["d_pressed" 1]]
           ;; D+N passthrough
           [:n [:d :n] ["d_pressed" 1]]
           ;; D+O passthrough
           [:o [:d :o] ["d_pressed" 1]]
           ;; D+P passthrough
           [:p [:d :p] ["d_pressed" 1]]
           ;; D+Q passthrough
           [:q [:d :q] ["d_pressed" 1]]
           ;; D+R passthrough
           [:r [:d :r] ["d_pressed" 1]]
           ;; D+S passthrough
           [:s [:d :s] ["d_pressed" 1]]
           ;; D+T passthrough
           [:t [:d :t] ["d_pressed" 1]]
           ;; D+U passthrough
           [:u [:d :u] ["d_pressed" 1]]
           ;; D+W passthrough
           [:w [:d :w] ["d_pressed" 1]]
           ;; D+X passthrough
           [:x [:d :x] ["d_pressed" 1]]
           ;; D+Y passthrough
           [:y [:d :y] ["d_pressed" 1]]
           ;; D+Z passthrough
           [:z [:d :z] ["d_pressed" 1]]
           ;; D+Space passthrough
           [:spacebar [:d :spacebar] ["d_pressed" 1]]
          ]}

  ;; Rule: Launch WhatsApp simultaneously (Q+T) - CORRECTED
  ;; Included once, assuming duplicates in JSON were S

  ;; Rule: Write command alone is enter.
  {:des "Right Command alone is Enter"
   :rules [
           [:#any :right_command :right_command nil {:alone :return_or_enter}]
           ;; Alternative interpretation - if right_command should pass through:
           ;; [:right_command nil nil {:alone :return_or_enter :passthrough true}]
           ;; Sticking to closer JSON translation:
           ;; [:#any :right_command :right_command nil {:alone :return_or_enter}]
          ]}

  ;; Rule: Complete Caps Lock Configuration (Hyper Key)
  {:des "Caps Lock Hyper Key Configuration"
   :rules [
           ;; Caps Lock -> Hyper Key (Escape if alone)
           [:#any :caps_lock ["hyper" 1] nil {:alone :escape :afterup ["hyper" 0]}]

           ;; Command+Caps Lock to Command+F (Find)
           [:!C :caps_lock :!Cf] ;; Goku syntax for Mandatory Cmd + Caps -> Cmd + F

           ;; Conditional Mappings (when hyper is 1)
           ;; Find in Page with Hyper+A (Cmd+Shift+/)
           [:a :!CSslash ["hyper" 1]]
           ;; New Tab with Hyper+D (Cmd+Shift+T)
           [:d :!CSt ["hyper" 1]]
           ;; Move to Start of Document with Hyper+I (Cmd+Up)
           [:i :!Cup_arrow ["hyper" 1]]
           ;; Move to End of Document with Hyper+K (Cmd+Down)
           [:k :!Cdown_arrow ["hyper" 1]]
           ;; Select to End of Document with Hyper+Shift+K (Cmd+Shift+Down)
           [:!Sk :!CSdown_arrow ["hyper" 1]]
           ;; Select to Start of Document with Hyper+Shift+I (Cmd+Shift+Up)
           [:!Si :!CSup_arrow ["hyper" 1]]
           ;; Save with Hyper+S (Cmd+S)
           [:s :!Cs ["hyper" 1]]
           ;; Hyper + Space to k Light (Option+F19)
           [:spacebar :!Of19 ["hyper" 1]]
           ;; Whisper / Dictation App with Hyper+F (Ctrl+Shift+0)
           [:f :!TS0 ["hyper" 1]]
           ;; Hyper + V to Option + F8 (OCR)
           [:v :!Of8 ["hyper" 1]]
           ;; Take Screenshot with Hyper+R (Cmd+Shift+4)
           [:r :!CS4 ["hyper" 1]]

           ;; --- Standalone Caps Lock combinations (without hyper variable) ---
           ;; These seem redundant/conflicting if Caps Lock is always Hyper.
           ;; Included based on original JSON, but may need review based on intent.
           ;; Select to Start of Document with Caps Lock+Shift+I
           [:!SPi :!CSup_arrow] ;; 'P' is caps_lock modifier
           ;; Select to End of Document with Caps Lock+Shift+K
           [:!SPk :!CSdown_arrow]
          ]}

 ;; Rule: Clipboard Trigger
 {:des "Clipboard Trigger (Option+V)"
  :rules [
          [:!Ov :!TS4] ;; Option+V to Control+Shift+4
         ]}

 ;; Rule: Brightness Controls
 {:des "Brightness Controls"
  :rules [
          [:!Cf2 :display_brightness_decrement] ;; Cmd+F2 to Brightness Down
          [:!Cf3 :display_brightness_increment] ;; Cmd+F3 to Brightness Up
         ]}

 ;; Rule: Both Command keys to trigger Wispr (Cmd+0)
 {:des "Both Command keys for Wispr (Cmd+0)"
  :rules [
          ;; Left Command pressed sets variable, passes through command
          [:#any :left_command [:left_command ["left_command_pressed" 1]] nil {:afterup ["left_command_pressed" 0]}]
          ;; Right Command triggers Cmd+0 when left_command_pressed is active
          [:#any :right_command :!C0 ["left_command_pressed" 1]]
         ]}

 ;; Rule: Hotkey Mappings (Miscellaneous)
 {:des "Hotkey Mappings"
  :rules [
          ;; Left Command + Comma to Left Mouse Button
          [:!Ccomma {:pkey :button1}]
          ;; Command+F to Command+Tab (App Switcher)
          [:!Cf :!Ctab]
          ;; Remap Backtick/Tilde to Tab in Vivaldi and Arc
          [:grave_accent_and_tilde :tab [:vivaldi :arc]]
          ;; Command+Shift+C to Command+Option+C in Finder
          [:!CSc :!COc [:finder]]
          ;; Remap Backtick/Tilde to F2 (non-Vivaldi and non-Arc)
          [:grave_accent_and_tilde :f2 [:!vivaldi :!arc]]
          ;; Grammar Strong (Shift+F to Ctrl+Shift+F5)
          [:!Sf :!TSf5]
          ;; Command+K with Right Option+K
          [:!Ek :!Ck] ;; Assuming 'E' is right_option
          ;; Command+Option+Escape with Option+4
          [:!O4 :!COescape] ;; Assuming 'O' is left_option. Use '!E4' if right_option is intended.
          ;; Right Option+F6 with Shift+F - Conflicted with Grammar Strong, commented out in previous step.
          ;; [:!Sf :!Ef6]
          ;; Redo with Command+Y (Cmd+Shift+Z)
          [:!Cy :!CSz]
          ;; Command+K in Notion with Command+Q
          [:!Cq :!Ck [:notion]]
          ;; Cycle Tabs Backward with Command+W (Ctrl+Shift+Tab)
          [:!Cw :!TStab]
          ;; Page Down with Command+Shift+W (Cmd+Shift+PageDown)
          [:!CSw :!CSpage_down]
          ;; Cycle Tabs Forward with Command+R (Ctrl+Tab)
          [:!CPr :!Ttab] ;; Optional caps_lock 'P'
          ;; Refresh Page with Command+Escape (Cmd+R)
          [:!CPescape :!Cr] ;; Optional caps_lock 'P'
          ;; Page Up with Command+Shift+R (Cmd+Shift+PageUp)
          [:!CSr :!CSpage_up]
          ;; Close Tab/Window with Command+E (Cmd+W)
          [:!Ce :!Cw]
          ;; Command+L (Focus Address Bar) with Command+Q (Non-Notion)
          [:!Cq :!Cl [:!notion]]
          ;; Swap Command+T and Command+G
          [:!Ct :!Cg]
          [:!Cg :!Ct]
          ;; Mute with F1
          [:f1 :mute]
          ;; Volume Down with F2
          [:f2 :volume_decrement]
          ;; Volume Up with F3
          [:f3 :volume_increment]
          ;; Play/Pause with F4
          [:f4 :play_or_pause]
          ;; Previous Song with F7
          [:f7 :rewind]
          ;; Next Song with F9
          [:f9 :fastforward]
          ;; Remap Escape to F16 in Vivaldi/Arc
          [:#any :escape :!Cf16 [:vivaldi :arc]]
          ;; Remap Escape to Command+K in Spotify
          [:#any :escape :!Ck [:spotify]]
          ;; Swap Escape and Tab (General, outside specific apps)
          [:escape :tab [:!vivaldi :!arc :!spotify]]
          [:tab :escape [:!vivaldi :!arc :!spotify]]
          ;; Shift+Tab with Shift+Escape (General)
          [:!Sescape :!Stab [:!vivaldi :!arc :!spotify]]
          ;; Remap Slash to J
          [:slash :j]
          ;; Type Double Quote with Both Shifts (Left Shift + Right Shift -> Shift + Quote)
          [:!Sright_shift :!Squote]
          ;; Type J with Shift+Slash
          [:!Sslash :!Sj]
          ;; Swap Brackets (] to [)
          [:close_bracket :open_bracket]
          ;; Remap Backslash to Closing Bracket
          [:backslash :close_bracket]
          ;; Swap Curly Braces (} to {)
          [:!Sclose_bracket :!Sopen_bracket]
          ;; Remap Pipe to Closing Curly Brace
          [:!Sbackslash :!Sclose_bracket]
          ;; Previous Tab with Command+S (Cmd+[)
          [:!Cs :!Copen_bracket]
          ;; Next Tab with Command+D (Cmd+])
          [:!Cd :!Cclose_bracket]
         ]}

 ;; Rule: Caps Lock triggers menu bar search (Assuming Hyper+A)
 {:des "Hyper+A triggers menu bar search"
  :rules [
          [:a "osascript ~/scripts/menu_bar_search.scpt" ["hyper" 1]]
         ]}

 ;; Rule: Text Revision App (Right Option layer?)
 {:des "Text Revision App Hotkeys (Right Option)"
  :rules [
          [:!Eg :!Sf18] ;; German
          [:!Ep :!Sf17] ;; PT EU
          [:!Eq :!Sf13] ;; PT BR
          [:!Ee :!TS8]  ;; English
          [:!Es :!Sf19] ;; Spanish
          [:!Ef :!Sf12] ;; French
          [:!Et :!CS9]  ;; French tutoyer
         ]}

 ;; Rule: Vivaldi: Right Command + K to Control + F18
 {:des "Vivaldi Quick Command Palette"
  :rules [
          [:!Qk :!Tf18 [:vivaldi]] ;; Assuming 'Q' is right_command
         ]}

 ;; Rule: Command + Caps Lock triggers Command + Tab (Reinterpreting Cmd+Tab)
 {:des "Remap Command+Tab and related"
  :rules [
          [:!Ctab :!Cgrave_accent_and_tilde] ;; Cmd+Tab -> Cmd+`
          [:!Cgrave_accent_and_tilde :!Cf3] ;; Cmd+` -> Cmd+F3
          [:!Otab :!CSw] ;; Option+Tab -> Cmd+Shift+W
         ]}

 ;; Rule: Application Launchers (Option Layer)
 {:des "Application Launchers (Left Option)"
  :rules [
          [:!OPd "open -a 'Notion.app'"] ;; Opt(+Caps)+D -> Notion
          [:!OPf "open -a 'Visual Studio Code.app'"] ;; Opt(+Caps)+F -> VS Code
          [:!OPc "open -a 'Obsidian.app'"] ;; Opt(+Caps)+C -> Obsidian
          [:!OPg "open -a 'Anki.app'"] ;; Opt(+Caps)+G -> Anki
          [:!OP1 "open -a 'Spotify.app'"] ;; Opt(+Caps)+1 -> Spotify
          [:!OPe "open -a 'Tasks.app'"] ;; Opt(+Caps)+E -> Tasks
          [:!OPq "open -a 'Deepl.app'"] ;; Opt(+Caps)+Q -> DeepL
          [:!OPw "osascript -e 'tell application \"Finder\" to activate'"] ;; Opt(+Caps)+W -> Finder
          [:!OPt "open -a 'WhatsApp.app'"] ;; Opt(+Caps)+T -> WhatsApp
          [:!C3 "osascript -e 'tell application \"Finder\" to activate' -e 'tell application \"System Events\" to tell process \"Finder\" to click (menu item \"Hide Others\" of menu \"Finder\" of menu bar 1)' -e 'delay 0.1' -e 'tell application \"System Settings\" to activate'"] ;; Cmd+3 -> Clean System Settings
          [:!O3 "open -a 'System Settings.app'"] ;; Opt+3 -> System Settings
          [:!OPs "open -a 'Gmail.app'"] ;; Opt(+Caps)+S -> Gmail
          [:!OPr "open -a 'RogerRoger.app'"] ;; Opt(+Caps)+R -> RogerRoger
          [:!OPx "open -a 'Google Calendar.app'"] ;; Opt(+Caps)+X -> Calendar
          [:!O2 "open -a Voxbi"] ;; Opt+2 -> Voxbi
          [:!OPb "open -n -a 'Safari.app' --args --disable-features=RendererCodeIntegrity"] ;; Opt(+Caps)+B -> Safari
          [:!OPa "open -a 'Arc.app'"] ;; Opt(+Caps)+A -> Arc
         ]}

 ;; Rule: Arrows Highlight and Delete and Backspace Modifications
 {:des "Navigation, Deletion, and Key Swaps"
  :rules [
          ;; Base Keys
          [:j :delete_or_backspace]
          [{:pkey :button3} :delete_or_backspace] ;; Middle Mouse -> Backspace
          [:open_bracket :delete_forward]
          [:quote :!Sslash] ;; ' -> ?
          [:delete_or_backspace :quote] ;; Backspace -> '
          [:semicolon :right_shift] ;; ; -> Right Shift
          [:right_shift :quote] ;; Right Shift -> ' (Seems conflicting with above ; -> RShift)
          [:return_or_enter :semicolon] ;; Enter -> ;
          [:slash :j] ;; / -> j

          ;; Shift Modified
          [:!Sj :!Cdelete_or_backspace] ;; Shift+J -> Delete Line (Cmd+Backspace)
          [:!Sdelete_or_backspace :!Squote] ;; Shift+Backspace -> "
          [:!Sreturn_or_enter :!Ssemicolon] ;; Shift+Enter -> :
          [:!Squote :slash] ;; Shift+' -> /
          [:!Sopen_bracket [:!CSright_arrow :delete_or_backspace]] ;; Shift+[ -> Select to EOL & Delete
          [:!Sslash :!Sj] ;; Shift+/ -> J

          ;; Command Modified
          [:!Cj :!Odelete_or_backspace] ;; Cmd+J -> Delete Word Back (Opt+Backspace)
          [:!Cquote :!CSslash] ;; Cmd+' -> Cmd+? (Cmd+Shift+/)
          [:!Copen_bracket :!Odelete_forward] ;; Cmd+[ -> Delete Word Forward (Opt+DeleteForward)
          [:!Ch :!Oleft_arrow] ;; Cmd+H -> Word Left
          [:!Cn :left_arrow] ;; Cmd+N -> Left
          [:!Cm :right_arrow] ;; Cmd+M -> Right
          [:!Ck :down_arrow] ;; Cmd+K -> Down
          [:!Ci :up_arrow] ;; Cmd+I -> Up
          [:!Cu :!Cleft_arrow] ;; Cmd+U -> Start of Line
          [:!Co :!Cright_arrow] ;; Cmd+O -> End of Line
          [:!Cl :!Oright_arrow] ;; Cmd+L -> Word Right

          ;; Command+Shift Modified
          [:!CSn :!Sleft_arrow] ;; Cmd+Shift+N -> Select Left
          [:!CSm :!Sright_arrow] ;; Cmd+Shift+M -> Select Right
          [:!CSk :!Sdown_arrow] ;; Cmd+Shift+K -> Select Down
          [:!CSi :!Sup_arrow] ;; Cmd+Shift+I -> Select Up
          [:!CSu :!CSleft_arrow] ;; Cmd+Shift+U -> Select to Start of Line
          [:!CSo :!CSright_arrow] ;; Cmd+Shift+O -> Select to End of Line
          [:!CSh :!OSleft_arrow] ;; Cmd+Shift+H -> Select Word Left
          [:!CSl :!OSright_arrow] ;; Cmd+Shift+L -> Select Word Right

          ;; Option Modified
          [:!Oi :!Oup_arrow] ;; Opt+I -> Paragraph Up
          [:!Ok :!Odown_arrow] ;; Opt+K -> Paragraph Down
          [:!Oj [:!CSup_arrow :delete_or_backspace]] ;; Opt+J -> Delete Line Above
          [:!Oopen_bracket [:!CSdown_arrow :delete_or_backspace]] ;; Opt+[ -> Delete Line Below

          ;; Option+Shift Modified
          [:!OSi :!OSup_arrow] ;; Opt+Shift+I -> Select Paragraph Up
          [:!OSk :!OSdown_arrow] ;; Opt+Shift+K -> Select Paragraph Down

          ;; Pointing Button Modified (Syntax is approximate - check Goku docs if these fail)
          [{:pkey :button3 :modi ["command" "shift"]} {:key_code :delete_or_backspace :modi ["command" "shift"]}] ;; Cmd+Shift+Button3 -> Cmd+Shift+Backspace
          [{:pkey :button3 :modi ["command"]} :!Odelete_or_backspace] ;; Cmd+Button3 -> Delete Word Back
          [{:pkey :button3 :modi ["shift"]} :!Cdelete_or_backspace] ;; Shift+Button3 -> Delete Line Back
          [{:pkey :button3 :modi ["command"]} :!Creturn_or_enter] ;; Cmd+Button3 -> Cmd+Enter
          [{:pkey :button3 :modi ["option"]} [:!CSup_arrow :delete_or_backspace]] ;; Opt+Button3 -> Delete Line Above

         ]}
 ]
}